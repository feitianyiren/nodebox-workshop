<?xml version="1.0" encoding="UTF-8" standalone="no"?>
<ndbx formatVersion="0.9" type="file">
    <node exported="true" name="spiral" prototype="corevector.generator" x="100" y="70">
        <param name="_code">
            <value type="python"><![CDATA[from nodebox.graphics import Path, Color
from math import sin, cos, pi, e, sqrt, atan2, pow

class Spiral(Path):
    def __init__(self, start_x, start_y, end_x, end_y, decay, length):
	Path.__init__(self)
        if  -1e-2 < decay < 1e-2: 
            # very decay of 0 indicates a line
            # but very small decays are practically line ans too small will cause e**1/decay to big = python error
            self.moveto(start_x, start_y )
            self.lineto(end_x, end_y )
        b = 1/float(decay)
        dt = pi/4
        m = 8
        if abs(b) > 1:
            # when the curve gets very flat we need to take a few more samples
            # a better approach might be to simply fit a single cubic curve to the end points
            dt /= abs(b)
        if b < 0:
            #curve reverses    
            dt *= -1
        D = sqrt(pow(start_x-end_x,2) + pow(start_y-end_y,2))
        t =  atan2(start_y-end_y, start_x-end_x)
        a = e**(-b*t)*D
        self.moveto(a*e**(b*t) * cos(t) + end_x, a*e**(b*t) * sin(t) + end_y )

        for i in range(int(length*m)):
            t2 = t - dt
            Dt = t2 -t
            # logarithmic spiral equations 
            x0 = a*e**(b*t) * cos(t) + end_x
            y0 = a*e**(b*t) * sin(t) + end_y 

            x3 = a*e**(b*t2) * cos(t2) + end_x
            y3 = a*e**(b*t2) * sin(t2) + end_y

            # Derivatives of spiral equation
            dx1 = a*b*e**(b*t) * cos(t) - a*e**(b*t) * sin(t)
            dy1 = a*e**(b*t) * cos(t) + a*b*e**(b*t) * sin(t) 

            dx2 = a*b*e**(b*t2) * cos(t2) - a*e**(b*t2) * sin(t2)
            dy2 = a*e**(b*t2) * cos(t2) + a*b*e**(b*t2) * sin(t2)  

            # calculate control points
            x1 = x0 + ((Dt/3.0) * dx1)
            y1 = y0 + ((Dt/3.0) * dy1)

            x2 = x3 - ((Dt/3.0) * dx2)
            y2 = y3 - ((Dt/3.0) * dy2)
            t -= dt
            self.curveto(x1, y1, x2, y2, x3, y3)
            

def cook(self):
    p = Spiral(self.start_x, self.start_y, self.end_x, self.end_y, self.decay, self.rotations)
    p.fillColor = self.fill
    p.strokeColor = self.stroke
    p.strokeWidth = self.strokeWidth                              
    return p.asGeometry()]]></value>
        </param>
        <param name="_handle">
            <value type="python"><![CDATA[from nodebox.handle import AbstractHandle, PointHandle

class CombinedHandle(AbstractHandle):
    def __init__(self, node, *handles):
        AbstractHandle.__init__(self, node)
        self.handles = handles

    def mousePressed(self, pt):
        for handle in self.handles:
            handle.mousePressed(pt)
        
    def mouseDragged(self, pt):
        for handle in self.handles:
            handle.mouseDragged(pt)
    
    def mouseReleased(self, pt):
        for handle in self.handles:
            handle.mouseReleased(pt)
            
    def draw(self, ctx):
        for handle in self.handles:
            handle.draw(ctx)

def cook(self):
    return CombinedHandle(self.node, PointHandle(self.node, "start_x", "start_y"), PointHandle(self.node, "end_x", "end_y"))    
]]></value>
        </param>
        <param name="_image">
            <value>spiral.png</value>
        </param>
        <param name="start_x" type="float">
            <value>-107.0</value>
        </param>
        <param name="start_y" type="float">
            <value>-57.0</value>
        </param>
        <param name="end_x" type="float">
            <value>-42.0</value>
        </param>
        <param name="end_y" type="float">
            <value>-41.0</value>
        </param>
        <param bounding="hard" min="1.0e-4" name="decay" type="float">
            <value>7.0001</value>
        </param>
        <param name="rotations" type="float">
            <value>3.0</value>
        </param>
        <param name="fill" type="color">
            <value>#00000000</value>
        </param>
        <param name="stroke" type="color">
            <value>#000000ff</value>
        </param>
        <param name="strokeWidth" type="float">
            <value>1.0</value>
        </param>
    </node>
</ndbx>
